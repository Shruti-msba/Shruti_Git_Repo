{"cells":[{"cell_type":"markdown","metadata":{"id":"dElkAyTWQ8yg"},"source":["Reference:\n","\n","https://www.kaggle.com/currie32/predicting-fraud-with-tensorflow\n","\n","https://www.kaggle.com/janiobachmann/credit-fraud-dealing-with-imbalanced-datasets\n","\n","https://www.kaggle.com/nschneider/gbm-vs-xgboost-vs-lightgbm"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27684,"status":"ok","timestamp":1607539998033,"user":{"displayName":"Haoyang Li","photoUrl":"","userId":"14167141501652666144"},"user_tz":360},"id":"HhMUs5KJT8a_","outputId":"9862d8c7-1123-40b5-9dae-13ab323dcfab"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /drive\n"]}],"source":["# Imported Libraries\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.manifold import TSNE\n","from sklearn.decomposition import PCA, TruncatedSVD\n","import matplotlib.patches as mpatches\n","import time\n","import matplotlib.gridspec as gridspec\n","\n","#training models\n","from sklearn.model_selection import train_test_split, KFold, RandomizedSearchCV\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","from sklearn.metrics import roc_curve, roc_auc_score, classification_report, accuracy_score, confusion_matrix \n","\n","\n","from google.colab import drive\n","drive.mount('/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":5810,"status":"ok","timestamp":1607540007740,"user":{"displayName":"Haoyang Li","photoUrl":"","userId":"14167141501652666144"},"user_tz":360},"id":"sqf1PWdlU5MZ"},"outputs":[],"source":["df = pd.read_csv('/drive/My Drive/BDS_Project/creditcard.csv')"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":3085,"status":"ok","timestamp":1607540007742,"user":{"displayName":"Haoyang Li","photoUrl":"","userId":"14167141501652666144"},"user_tz":360},"id":"Ip5o-IofhH0j"},"outputs":[],"source":["df = df.drop(['V28','V27','V26','V25','V24','V23','V22','V20','V15','V13','V8'], axis =1)"]},{"cell_type":"markdown","metadata":{"id":"IzAJTScwh66W"},"source":["## Training\n","\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":426},"executionInfo":{"elapsed":1077,"status":"ok","timestamp":1607540007745,"user":{"displayName":"Haoyang Li","photoUrl":"","userId":"14167141501652666144"},"user_tz":360},"id":"2sp5NhR3lMHP","outputId":"3caefeb6-abcc-4be5-ff61-28ede82627d1"},"outputs":[{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eTime\u003c/th\u003e\n","      \u003cth\u003eV1\u003c/th\u003e\n","      \u003cth\u003eV2\u003c/th\u003e\n","      \u003cth\u003eV3\u003c/th\u003e\n","      \u003cth\u003eV4\u003c/th\u003e\n","      \u003cth\u003eV5\u003c/th\u003e\n","      \u003cth\u003eV6\u003c/th\u003e\n","      \u003cth\u003eV7\u003c/th\u003e\n","      \u003cth\u003eV9\u003c/th\u003e\n","      \u003cth\u003eV10\u003c/th\u003e\n","      \u003cth\u003eV11\u003c/th\u003e\n","      \u003cth\u003eV12\u003c/th\u003e\n","      \u003cth\u003eV14\u003c/th\u003e\n","      \u003cth\u003eV16\u003c/th\u003e\n","      \u003cth\u003eV17\u003c/th\u003e\n","      \u003cth\u003eV18\u003c/th\u003e\n","      \u003cth\u003eV19\u003c/th\u003e\n","      \u003cth\u003eV21\u003c/th\u003e\n","      \u003cth\u003eAmount\u003c/th\u003e\n","      \u003cth\u003eClass\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e-1.359807\u003c/td\u003e\n","      \u003ctd\u003e-0.072781\u003c/td\u003e\n","      \u003ctd\u003e2.536347\u003c/td\u003e\n","      \u003ctd\u003e1.378155\u003c/td\u003e\n","      \u003ctd\u003e-0.338321\u003c/td\u003e\n","      \u003ctd\u003e0.462388\u003c/td\u003e\n","      \u003ctd\u003e0.239599\u003c/td\u003e\n","      \u003ctd\u003e0.363787\u003c/td\u003e\n","      \u003ctd\u003e0.090794\u003c/td\u003e\n","      \u003ctd\u003e-0.551600\u003c/td\u003e\n","      \u003ctd\u003e-0.617801\u003c/td\u003e\n","      \u003ctd\u003e-0.311169\u003c/td\u003e\n","      \u003ctd\u003e-0.470401\u003c/td\u003e\n","      \u003ctd\u003e0.207971\u003c/td\u003e\n","      \u003ctd\u003e0.025791\u003c/td\u003e\n","      \u003ctd\u003e0.403993\u003c/td\u003e\n","      \u003ctd\u003e-0.018307\u003c/td\u003e\n","      \u003ctd\u003e149.62\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.191857\u003c/td\u003e\n","      \u003ctd\u003e0.266151\u003c/td\u003e\n","      \u003ctd\u003e0.166480\u003c/td\u003e\n","      \u003ctd\u003e0.448154\u003c/td\u003e\n","      \u003ctd\u003e0.060018\u003c/td\u003e\n","      \u003ctd\u003e-0.082361\u003c/td\u003e\n","      \u003ctd\u003e-0.078803\u003c/td\u003e\n","      \u003ctd\u003e-0.255425\u003c/td\u003e\n","      \u003ctd\u003e-0.166974\u003c/td\u003e\n","      \u003ctd\u003e1.612727\u003c/td\u003e\n","      \u003ctd\u003e1.065235\u003c/td\u003e\n","      \u003ctd\u003e-0.143772\u003c/td\u003e\n","      \u003ctd\u003e0.463917\u003c/td\u003e\n","      \u003ctd\u003e-0.114805\u003c/td\u003e\n","      \u003ctd\u003e-0.183361\u003c/td\u003e\n","      \u003ctd\u003e-0.145783\u003c/td\u003e\n","      \u003ctd\u003e-0.225775\u003c/td\u003e\n","      \u003ctd\u003e2.69\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e-1.358354\u003c/td\u003e\n","      \u003ctd\u003e-1.340163\u003c/td\u003e\n","      \u003ctd\u003e1.773209\u003c/td\u003e\n","      \u003ctd\u003e0.379780\u003c/td\u003e\n","      \u003ctd\u003e-0.503198\u003c/td\u003e\n","      \u003ctd\u003e1.800499\u003c/td\u003e\n","      \u003ctd\u003e0.791461\u003c/td\u003e\n","      \u003ctd\u003e-1.514654\u003c/td\u003e\n","      \u003ctd\u003e0.207643\u003c/td\u003e\n","      \u003ctd\u003e0.624501\u003c/td\u003e\n","      \u003ctd\u003e0.066084\u003c/td\u003e\n","      \u003ctd\u003e-0.165946\u003c/td\u003e\n","      \u003ctd\u003e-2.890083\u003c/td\u003e\n","      \u003ctd\u003e1.109969\u003c/td\u003e\n","      \u003ctd\u003e-0.121359\u003c/td\u003e\n","      \u003ctd\u003e-2.261857\u003c/td\u003e\n","      \u003ctd\u003e0.247998\u003c/td\u003e\n","      \u003ctd\u003e378.66\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e-0.966272\u003c/td\u003e\n","      \u003ctd\u003e-0.185226\u003c/td\u003e\n","      \u003ctd\u003e1.792993\u003c/td\u003e\n","      \u003ctd\u003e-0.863291\u003c/td\u003e\n","      \u003ctd\u003e-0.010309\u003c/td\u003e\n","      \u003ctd\u003e1.247203\u003c/td\u003e\n","      \u003ctd\u003e0.237609\u003c/td\u003e\n","      \u003ctd\u003e-1.387024\u003c/td\u003e\n","      \u003ctd\u003e-0.054952\u003c/td\u003e\n","      \u003ctd\u003e-0.226487\u003c/td\u003e\n","      \u003ctd\u003e0.178228\u003c/td\u003e\n","      \u003ctd\u003e-0.287924\u003c/td\u003e\n","      \u003ctd\u003e-1.059647\u003c/td\u003e\n","      \u003ctd\u003e-0.684093\u003c/td\u003e\n","      \u003ctd\u003e1.965775\u003c/td\u003e\n","      \u003ctd\u003e-1.232622\u003c/td\u003e\n","      \u003ctd\u003e-0.108300\u003c/td\u003e\n","      \u003ctd\u003e123.50\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003e-1.158233\u003c/td\u003e\n","      \u003ctd\u003e0.877737\u003c/td\u003e\n","      \u003ctd\u003e1.548718\u003c/td\u003e\n","      \u003ctd\u003e0.403034\u003c/td\u003e\n","      \u003ctd\u003e-0.407193\u003c/td\u003e\n","      \u003ctd\u003e0.095921\u003c/td\u003e\n","      \u003ctd\u003e0.592941\u003c/td\u003e\n","      \u003ctd\u003e0.817739\u003c/td\u003e\n","      \u003ctd\u003e0.753074\u003c/td\u003e\n","      \u003ctd\u003e-0.822843\u003c/td\u003e\n","      \u003ctd\u003e0.538196\u003c/td\u003e\n","      \u003ctd\u003e-1.119670\u003c/td\u003e\n","      \u003ctd\u003e-0.451449\u003c/td\u003e\n","      \u003ctd\u003e-0.237033\u003c/td\u003e\n","      \u003ctd\u003e-0.038195\u003c/td\u003e\n","      \u003ctd\u003e0.803487\u003c/td\u003e\n","      \u003ctd\u003e-0.009431\u003c/td\u003e\n","      \u003ctd\u003e69.99\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e284802\u003c/th\u003e\n","      \u003ctd\u003e172786.0\u003c/td\u003e\n","      \u003ctd\u003e-11.881118\u003c/td\u003e\n","      \u003ctd\u003e10.071785\u003c/td\u003e\n","      \u003ctd\u003e-9.834783\u003c/td\u003e\n","      \u003ctd\u003e-2.066656\u003c/td\u003e\n","      \u003ctd\u003e-5.364473\u003c/td\u003e\n","      \u003ctd\u003e-2.606837\u003c/td\u003e\n","      \u003ctd\u003e-4.918215\u003c/td\u003e\n","      \u003ctd\u003e1.914428\u003c/td\u003e\n","      \u003ctd\u003e4.356170\u003c/td\u003e\n","      \u003ctd\u003e-1.593105\u003c/td\u003e\n","      \u003ctd\u003e2.711941\u003c/td\u003e\n","      \u003ctd\u003e4.626942\u003c/td\u003e\n","      \u003ctd\u003e1.107641\u003c/td\u003e\n","      \u003ctd\u003e1.991691\u003c/td\u003e\n","      \u003ctd\u003e0.510632\u003c/td\u003e\n","      \u003ctd\u003e-0.682920\u003c/td\u003e\n","      \u003ctd\u003e0.213454\u003c/td\u003e\n","      \u003ctd\u003e0.77\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e284803\u003c/th\u003e\n","      \u003ctd\u003e172787.0\u003c/td\u003e\n","      \u003ctd\u003e-0.732789\u003c/td\u003e\n","      \u003ctd\u003e-0.055080\u003c/td\u003e\n","      \u003ctd\u003e2.035030\u003c/td\u003e\n","      \u003ctd\u003e-0.738589\u003c/td\u003e\n","      \u003ctd\u003e0.868229\u003c/td\u003e\n","      \u003ctd\u003e1.058415\u003c/td\u003e\n","      \u003ctd\u003e0.024330\u003c/td\u003e\n","      \u003ctd\u003e0.584800\u003c/td\u003e\n","      \u003ctd\u003e-0.975926\u003c/td\u003e\n","      \u003ctd\u003e-0.150189\u003c/td\u003e\n","      \u003ctd\u003e0.915802\u003c/td\u003e\n","      \u003ctd\u003e-0.675143\u003c/td\u003e\n","      \u003ctd\u003e-0.711757\u003c/td\u003e\n","      \u003ctd\u003e-0.025693\u003c/td\u003e\n","      \u003ctd\u003e-1.221179\u003c/td\u003e\n","      \u003ctd\u003e-1.545556\u003c/td\u003e\n","      \u003ctd\u003e0.214205\u003c/td\u003e\n","      \u003ctd\u003e24.79\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e284804\u003c/th\u003e\n","      \u003ctd\u003e172788.0\u003c/td\u003e\n","      \u003ctd\u003e1.919565\u003c/td\u003e\n","      \u003ctd\u003e-0.301254\u003c/td\u003e\n","      \u003ctd\u003e-3.249640\u003c/td\u003e\n","      \u003ctd\u003e-0.557828\u003c/td\u003e\n","      \u003ctd\u003e2.630515\u003c/td\u003e\n","      \u003ctd\u003e3.031260\u003c/td\u003e\n","      \u003ctd\u003e-0.296827\u003c/td\u003e\n","      \u003ctd\u003e0.432454\u003c/td\u003e\n","      \u003ctd\u003e-0.484782\u003c/td\u003e\n","      \u003ctd\u003e0.411614\u003c/td\u003e\n","      \u003ctd\u003e0.063119\u003c/td\u003e\n","      \u003ctd\u003e-0.510602\u003c/td\u003e\n","      \u003ctd\u003e0.140716\u003c/td\u003e\n","      \u003ctd\u003e0.313502\u003c/td\u003e\n","      \u003ctd\u003e0.395652\u003c/td\u003e\n","      \u003ctd\u003e-0.577252\u003c/td\u003e\n","      \u003ctd\u003e0.232045\u003c/td\u003e\n","      \u003ctd\u003e67.88\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e284805\u003c/th\u003e\n","      \u003ctd\u003e172788.0\u003c/td\u003e\n","      \u003ctd\u003e-0.240440\u003c/td\u003e\n","      \u003ctd\u003e0.530483\u003c/td\u003e\n","      \u003ctd\u003e0.702510\u003c/td\u003e\n","      \u003ctd\u003e0.689799\u003c/td\u003e\n","      \u003ctd\u003e-0.377961\u003c/td\u003e\n","      \u003ctd\u003e0.623708\u003c/td\u003e\n","      \u003ctd\u003e-0.686180\u003c/td\u003e\n","      \u003ctd\u003e0.392087\u003c/td\u003e\n","      \u003ctd\u003e-0.399126\u003c/td\u003e\n","      \u003ctd\u003e-1.933849\u003c/td\u003e\n","      \u003ctd\u003e-0.962886\u003c/td\u003e\n","      \u003ctd\u003e0.449624\u003c/td\u003e\n","      \u003ctd\u003e-0.608577\u003c/td\u003e\n","      \u003ctd\u003e0.509928\u003c/td\u003e\n","      \u003ctd\u003e1.113981\u003c/td\u003e\n","      \u003ctd\u003e2.897849\u003c/td\u003e\n","      \u003ctd\u003e0.265245\u003c/td\u003e\n","      \u003ctd\u003e10.00\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e284806\u003c/th\u003e\n","      \u003ctd\u003e172792.0\u003c/td\u003e\n","      \u003ctd\u003e-0.533413\u003c/td\u003e\n","      \u003ctd\u003e-0.189733\u003c/td\u003e\n","      \u003ctd\u003e0.703337\u003c/td\u003e\n","      \u003ctd\u003e-0.506271\u003c/td\u003e\n","      \u003ctd\u003e-0.012546\u003c/td\u003e\n","      \u003ctd\u003e-0.649617\u003c/td\u003e\n","      \u003ctd\u003e1.577006\u003c/td\u003e\n","      \u003ctd\u003e0.486180\u003c/td\u003e\n","      \u003ctd\u003e-0.915427\u003c/td\u003e\n","      \u003ctd\u003e-1.040458\u003c/td\u003e\n","      \u003ctd\u003e-0.031513\u003c/td\u003e\n","      \u003ctd\u003e-0.084316\u003c/td\u003e\n","      \u003ctd\u003e-0.302620\u003c/td\u003e\n","      \u003ctd\u003e-0.660377\u003c/td\u003e\n","      \u003ctd\u003e0.167430\u003c/td\u003e\n","      \u003ctd\u003e-0.256117\u003c/td\u003e\n","      \u003ctd\u003e0.261057\u003c/td\u003e\n","      \u003ctd\u003e217.00\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e284807 rows × 20 columns\u003c/p\u003e\n","\u003c/div\u003e"],"text/plain":["            Time         V1         V2  ...       V21  Amount  Class\n","0            0.0  -1.359807  -0.072781  ... -0.018307  149.62      0\n","1            0.0   1.191857   0.266151  ... -0.225775    2.69      0\n","2            1.0  -1.358354  -1.340163  ...  0.247998  378.66      0\n","3            1.0  -0.966272  -0.185226  ... -0.108300  123.50      0\n","4            2.0  -1.158233   0.877737  ... -0.009431   69.99      0\n","...          ...        ...        ...  ...       ...     ...    ...\n","284802  172786.0 -11.881118  10.071785  ...  0.213454    0.77      0\n","284803  172787.0  -0.732789  -0.055080  ...  0.214205   24.79      0\n","284804  172788.0   1.919565  -0.301254  ...  0.232045   67.88      0\n","284805  172788.0  -0.240440   0.530483  ...  0.265245   10.00      0\n","284806  172792.0  -0.533413  -0.189733  ...  0.261057  217.00      0\n","\n","[284807 rows x 20 columns]"]},"execution_count":4,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["df"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":495,"status":"ok","timestamp":1607540009957,"user":{"displayName":"Haoyang Li","photoUrl":"","userId":"14167141501652666144"},"user_tz":360},"id":"74MXLskSithc"},"outputs":[],"source":["X = df.drop(['Class'],axis = 1)\n","y = df['Class']\n","(X_train,X_test,y_train,y_test) = train_test_split(X,y,test_size = 0.2, random_state = 42)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AegOOWEoZvc_","outputId":"95b7a40a-773b-4e88-cfd8-0fe05197c585"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n","  FutureWarning\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"name":"stdout","output_type":"stream","text":["[ 45559  45560  45561 ... 227842 227843 227844] [    0     1     2 ... 49506 49902 50145]\n"]}],"source":["# https://www.kaggle.com/janiobachmann/credit-fraud-dealing-with-imbalanced-datasets \u003c- REFERENCE CELL 40\n","\n","from imblearn.over_sampling import SMOTE\n","from imblearn.pipeline import make_pipeline\n","\n","# List to append the score and then find the average\n","accuracy_lst = []\n","precision_lst = []\n","recall_lst = []\n","f1_lst = []\n","auc_lst = []\n","\n","#Implementing SMOTE Technique\n","kf = KFold(n_splits=5, random_state=0, shuffle=False)\n","\n","#model\n","rf = RandomForestClassifier()\n","\n","#mode larams\n","params = {'n_estimators': [800, 1000, 1200, 1500],\n","          'max_features': ['auto', 'sqrt'],\n","          'max_depth': Integer(1, 100),\n","          'min_samples_split': [2, 5, 10],\n","          'min_samples_leaf': [1, 2, 4],\n","          'bootstrap': [True, False]}\n","\n","#model CV\n","rf_cv = RandomizedSearchCV(RandomForestClassifier(), params, n_iter=4)\n","\n","for train, test in sss.split(X_train, y_train):\n","  pipeline = make_pipeline(SMOTE(sampling_strategy='minority'), rf_cv)\n","  print(train, test)\n","  model = pipeline.fit(X_train.iloc[train], y_train.iloc[train])\n","  best_est = rf_cv.best_estimator_\n","  preds = best_est.predict(X_train[test])\n","\n","  accuracy_lst.append(pipeline.score(original_Xtrain[test], original_ytrain[test]))\n","  precision_lst.append(precision_score(original_ytrain[test], prediction))\n","  recall_lst.append(recall_score(original_ytrain[test], prediction))\n","  f1_lst.append(f1_score(original_ytrain[test], prediction))\n","  auc_lst.append(roc_auc_score(original_ytrain[test], prediction))\n","\n","print(\"accuracy: {}\".format(np.mean(accuracy_lst)))\n","print(\"precision: {}\".format(np.mean(precision_lst)))\n","print(\"recall: {}\".format(np.mean(recall_lst)))\n","print(\"f1: {}\".format(np.mean(f1_lst)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p4oHhvVaWDTK"},"outputs":[],"source":["def classification_model(model, X_train, y_train):\n","    #Fit the model:\n","    time_start = time.perf_counter() #start counting the time\n","    model.fit(X_train,y_train)\n","    n_cache = []\n","    \n","    train_predictions = model.predict(X_train)\n","    precision = precision_score(y_train, train_predictions)\n","    recall = recall_score(y_train, train_predictions)\n","    f1 = f1_score(y_train, train_predictions)\n","    \n","    print(\"Precision \", precision)\n","    print(\"Recall \", recall)\n","    print(\"F1 score \", f1)\n","    \n","    cr_val = cross_val_score(model, X_train, y_train, cv=5, scoring='roc_auc')\n","    \n","    time_end = time.perf_counter()\n","    \n","    total_time = time_end-time_start\n","    print(\"Cross Validation Score: %f\" %np.mean(cr_val))\n","    print(\"Amount of time spent during training the model and cross validation: %4.3f seconds\" % (total_time))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XUCxBm0EWFZ4"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":385,"status":"ok","timestamp":1607447057231,"user":{"displayName":"Haoyang Li","photoUrl":"","userId":"14167141501652666144"},"user_tz":360},"id":"RivyE5-ImOrQ","outputId":"dd1faed0-f985-4077-edb2-273e9ecf56e8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Validation ROC-AUC score: 0.9083217171224145\n"]}],"source":["\n","#solution = pd.DataFrame({\"id\":testX, \"Y\":lr_pred})\n","valid_score = roc_auc_score(testY, lr_pred)\n","print('Validation ROC-AUC score:', valid_score)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"SbrLw-yEmcmq"},"outputs":[],"source":["rf = RandomForestClassifier(n_estimators = 1000, oob_score= True, random_state=42)\n","rf.fit(X_train, y_train)\n","rf_pred = rf.predict(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"zPNZLs122Ia-"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-7-86e1b10703d2\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[0;32m----\u003e 1\u001b[0;31m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'y_pred' is not defined"]}],"source":["accuracy_score(y_test,y_pred)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"dptP9uok3KH0"},"outputs":[],"source":["f1_score(y_test,y_pred)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"WJY6c4tH3NlB"},"outputs":[],"source":["recall_score(y_test,y_pred)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N3ghjOeh2Sen"},"outputs":[],"source":["#solution = pd.DataFrame({\"id\":testX.Id, \"Y\":rf_pred})\n","valid_score = roc_auc_score(testY, rf_pred)\n","print('Validation ROC-AUC score:', valid_score)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2855,"status":"ok","timestamp":1607448107969,"user":{"displayName":"Haoyang Li","photoUrl":"","userId":"14167141501652666144"},"user_tz":360},"id":"Vyl5Uxn9Sbq5","outputId":"ed710912-73e3-4587-d841-f087f4bde2d5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: scikit-optimize in /usr/local/lib/python3.6/dist-packages (0.8.1)\n","Requirement already satisfied: joblib\u003e=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-optimize) (0.17.0)\n","Requirement already satisfied: scikit-learn\u003e=0.20.0 in /usr/local/lib/python3.6/dist-packages (from scikit-optimize) (0.22.2.post1)\n","Requirement already satisfied: pyaml\u003e=16.9 in /usr/local/lib/python3.6/dist-packages (from scikit-optimize) (20.4.0)\n","Requirement already satisfied: numpy\u003e=1.13.3 in /usr/local/lib/python3.6/dist-packages (from scikit-optimize) (1.18.5)\n","Requirement already satisfied: scipy\u003e=0.19.1 in /usr/local/lib/python3.6/dist-packages (from scikit-optimize) (1.4.1)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.6/dist-packages (from pyaml\u003e=16.9-\u003escikit-optimize) (3.13)\n"]}],"source":["!pip install scikit-optimize\n","from skopt import BayesSearchCV\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import roc_auc_score\n","from sklearn.metrics import make_scorer\n","from skopt.space import Real, Categorical, Integer\n","from skopt.callbacks import DeadlineStopper, VerboseCallback, DeltaXStopper"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Wh8tNcNcRwA0"},"outputs":[],"source":["params = {'n_estimators': Integer(10, 1000),\n","          'max_features': Integer(1, 18),\n","          'max_depth': Integer(1, 100),\n","          'min_samples_split': Integer(1, 10),\n","          'min_samples_leaf': Integer(1, 10),\n","          'bootstrap': [True, False]}\n","rf = RandomForestClassifier(oob_score= True, random_state=42)\n","# clf = CatBoostClassifier(random_state = 42, thread_count=2,\n","#                          loss_function='Logloss',\n","#                          od_type = 'Iter',\n","#                          verbose= False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9-PmZ48JXzHd"},"outputs":[],"source":[""]}],"metadata":{"colab":{"collapsed_sections":[],"name":"Random_forest_branch","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}