{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BDS_LGBM","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"dElkAyTWQ8yg"},"source":["Reference:\n","\n","https://www.kaggle.com/currie32/predicting-fraud-with-tensorflow\n","\n","https://www.kaggle.com/janiobachmann/credit-fraud-dealing-with-imbalanced-datasets\n","\n","https://www.kaggle.com/nschneider/gbm-vs-xgboost-vs-lightgbm\n","\n","https://www.kaggle.com/akumaldo/credit-card-fraud-lgbm-model\n"]},{"cell_type":"code","metadata":{"id":"HhMUs5KJT8a_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607504215368,"user_tz":360,"elapsed":2738,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"19e7e1f1-747c-4d12-eb2c-917a8a8b4604"},"source":["# Imported Libraries\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.manifold import TSNE\n","from sklearn.decomposition import PCA, TruncatedSVD\n","import matplotlib.patches as mpatches\n","import time\n","import matplotlib.gridspec as gridspec\n","\n","#training models\n","from sklearn.model_selection import train_test_split, KFold\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","from sklearn.metrics import roc_curve, roc_auc_score, classification_report, accuracy_score, confusion_matrix \n","\n","from imblearn.over_sampling import SMOTE\n","from imblearn.pipeline import make_pipeline\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.metrics import recall_score\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import f1_score\n","from sklearn.model_selection import cross_val_score\n","import lightgbm as lgb\n","from sklearn.model_selection import cross_val_predict\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import GridSearchCV\n","\n","from google.colab import drive\n","drive.mount('/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /drive; to attempt to forcibly remount, call drive.mount(\"/drive\", force_remount=True).\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","  \"(https://pypi.org/project/six/).\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"sqf1PWdlU5MZ"},"source":[" df = pd.read_csv('/drive/My Drive/BDS_Project/creditcard.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":220},"id":"1ct6bNYTXowV","executionInfo":{"status":"ok","timestamp":1607504222100,"user_tz":360,"elapsed":1459,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"792bb281-06d0-4520-9bd8-7faacf75cd69"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>V6</th>\n","      <th>V7</th>\n","      <th>V8</th>\n","      <th>V9</th>\n","      <th>V10</th>\n","      <th>V11</th>\n","      <th>V12</th>\n","      <th>V13</th>\n","      <th>V14</th>\n","      <th>V15</th>\n","      <th>V16</th>\n","      <th>V17</th>\n","      <th>V18</th>\n","      <th>V19</th>\n","      <th>V20</th>\n","      <th>V21</th>\n","      <th>V22</th>\n","      <th>V23</th>\n","      <th>V24</th>\n","      <th>V25</th>\n","      <th>V26</th>\n","      <th>V27</th>\n","      <th>V28</th>\n","      <th>Amount</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>-1.359807</td>\n","      <td>-0.072781</td>\n","      <td>2.536347</td>\n","      <td>1.378155</td>\n","      <td>-0.338321</td>\n","      <td>0.462388</td>\n","      <td>0.239599</td>\n","      <td>0.098698</td>\n","      <td>0.363787</td>\n","      <td>0.090794</td>\n","      <td>-0.551600</td>\n","      <td>-0.617801</td>\n","      <td>-0.991390</td>\n","      <td>-0.311169</td>\n","      <td>1.468177</td>\n","      <td>-0.470401</td>\n","      <td>0.207971</td>\n","      <td>0.025791</td>\n","      <td>0.403993</td>\n","      <td>0.251412</td>\n","      <td>-0.018307</td>\n","      <td>0.277838</td>\n","      <td>-0.110474</td>\n","      <td>0.066928</td>\n","      <td>0.128539</td>\n","      <td>-0.189115</td>\n","      <td>0.133558</td>\n","      <td>-0.021053</td>\n","      <td>149.62</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>1.191857</td>\n","      <td>0.266151</td>\n","      <td>0.166480</td>\n","      <td>0.448154</td>\n","      <td>0.060018</td>\n","      <td>-0.082361</td>\n","      <td>-0.078803</td>\n","      <td>0.085102</td>\n","      <td>-0.255425</td>\n","      <td>-0.166974</td>\n","      <td>1.612727</td>\n","      <td>1.065235</td>\n","      <td>0.489095</td>\n","      <td>-0.143772</td>\n","      <td>0.635558</td>\n","      <td>0.463917</td>\n","      <td>-0.114805</td>\n","      <td>-0.183361</td>\n","      <td>-0.145783</td>\n","      <td>-0.069083</td>\n","      <td>-0.225775</td>\n","      <td>-0.638672</td>\n","      <td>0.101288</td>\n","      <td>-0.339846</td>\n","      <td>0.167170</td>\n","      <td>0.125895</td>\n","      <td>-0.008983</td>\n","      <td>0.014724</td>\n","      <td>2.69</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>-1.358354</td>\n","      <td>-1.340163</td>\n","      <td>1.773209</td>\n","      <td>0.379780</td>\n","      <td>-0.503198</td>\n","      <td>1.800499</td>\n","      <td>0.791461</td>\n","      <td>0.247676</td>\n","      <td>-1.514654</td>\n","      <td>0.207643</td>\n","      <td>0.624501</td>\n","      <td>0.066084</td>\n","      <td>0.717293</td>\n","      <td>-0.165946</td>\n","      <td>2.345865</td>\n","      <td>-2.890083</td>\n","      <td>1.109969</td>\n","      <td>-0.121359</td>\n","      <td>-2.261857</td>\n","      <td>0.524980</td>\n","      <td>0.247998</td>\n","      <td>0.771679</td>\n","      <td>0.909412</td>\n","      <td>-0.689281</td>\n","      <td>-0.327642</td>\n","      <td>-0.139097</td>\n","      <td>-0.055353</td>\n","      <td>-0.059752</td>\n","      <td>378.66</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>-0.966272</td>\n","      <td>-0.185226</td>\n","      <td>1.792993</td>\n","      <td>-0.863291</td>\n","      <td>-0.010309</td>\n","      <td>1.247203</td>\n","      <td>0.237609</td>\n","      <td>0.377436</td>\n","      <td>-1.387024</td>\n","      <td>-0.054952</td>\n","      <td>-0.226487</td>\n","      <td>0.178228</td>\n","      <td>0.507757</td>\n","      <td>-0.287924</td>\n","      <td>-0.631418</td>\n","      <td>-1.059647</td>\n","      <td>-0.684093</td>\n","      <td>1.965775</td>\n","      <td>-1.232622</td>\n","      <td>-0.208038</td>\n","      <td>-0.108300</td>\n","      <td>0.005274</td>\n","      <td>-0.190321</td>\n","      <td>-1.175575</td>\n","      <td>0.647376</td>\n","      <td>-0.221929</td>\n","      <td>0.062723</td>\n","      <td>0.061458</td>\n","      <td>123.50</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","      <td>-1.158233</td>\n","      <td>0.877737</td>\n","      <td>1.548718</td>\n","      <td>0.403034</td>\n","      <td>-0.407193</td>\n","      <td>0.095921</td>\n","      <td>0.592941</td>\n","      <td>-0.270533</td>\n","      <td>0.817739</td>\n","      <td>0.753074</td>\n","      <td>-0.822843</td>\n","      <td>0.538196</td>\n","      <td>1.345852</td>\n","      <td>-1.119670</td>\n","      <td>0.175121</td>\n","      <td>-0.451449</td>\n","      <td>-0.237033</td>\n","      <td>-0.038195</td>\n","      <td>0.803487</td>\n","      <td>0.408542</td>\n","      <td>-0.009431</td>\n","      <td>0.798278</td>\n","      <td>-0.137458</td>\n","      <td>0.141267</td>\n","      <td>-0.206010</td>\n","      <td>0.502292</td>\n","      <td>0.219422</td>\n","      <td>0.215153</td>\n","      <td>69.99</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Time        V1        V2        V3  ...       V27       V28  Amount  Class\n","0   0.0 -1.359807 -0.072781  2.536347  ...  0.133558 -0.021053  149.62      0\n","1   0.0  1.191857  0.266151  0.166480  ... -0.008983  0.014724    2.69      0\n","2   1.0 -1.358354 -1.340163  1.773209  ... -0.055353 -0.059752  378.66      0\n","3   1.0 -0.966272 -0.185226  1.792993  ...  0.062723  0.061458  123.50      0\n","4   2.0 -1.158233  0.877737  1.548718  ...  0.219422  0.215153   69.99      0\n","\n","[5 rows x 31 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"Ip5o-IofhH0j"},"source":["df = df.drop(['V28','V27','V26','V25','V24','V23','V22','V20','V15','V13','V8'], axis =1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Bm1JgvJMjgAF","colab":{"base_uri":"https://localhost:8080/","height":220},"executionInfo":{"status":"ok","timestamp":1607504224694,"user_tz":360,"elapsed":1739,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"5c04f889-5900-4ec4-d597-584be3ac3d6e"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>V6</th>\n","      <th>V7</th>\n","      <th>V9</th>\n","      <th>V10</th>\n","      <th>V11</th>\n","      <th>V12</th>\n","      <th>V14</th>\n","      <th>V16</th>\n","      <th>V17</th>\n","      <th>V18</th>\n","      <th>V19</th>\n","      <th>V21</th>\n","      <th>Amount</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>-1.359807</td>\n","      <td>-0.072781</td>\n","      <td>2.536347</td>\n","      <td>1.378155</td>\n","      <td>-0.338321</td>\n","      <td>0.462388</td>\n","      <td>0.239599</td>\n","      <td>0.363787</td>\n","      <td>0.090794</td>\n","      <td>-0.551600</td>\n","      <td>-0.617801</td>\n","      <td>-0.311169</td>\n","      <td>-0.470401</td>\n","      <td>0.207971</td>\n","      <td>0.025791</td>\n","      <td>0.403993</td>\n","      <td>-0.018307</td>\n","      <td>149.62</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>1.191857</td>\n","      <td>0.266151</td>\n","      <td>0.166480</td>\n","      <td>0.448154</td>\n","      <td>0.060018</td>\n","      <td>-0.082361</td>\n","      <td>-0.078803</td>\n","      <td>-0.255425</td>\n","      <td>-0.166974</td>\n","      <td>1.612727</td>\n","      <td>1.065235</td>\n","      <td>-0.143772</td>\n","      <td>0.463917</td>\n","      <td>-0.114805</td>\n","      <td>-0.183361</td>\n","      <td>-0.145783</td>\n","      <td>-0.225775</td>\n","      <td>2.69</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>-1.358354</td>\n","      <td>-1.340163</td>\n","      <td>1.773209</td>\n","      <td>0.379780</td>\n","      <td>-0.503198</td>\n","      <td>1.800499</td>\n","      <td>0.791461</td>\n","      <td>-1.514654</td>\n","      <td>0.207643</td>\n","      <td>0.624501</td>\n","      <td>0.066084</td>\n","      <td>-0.165946</td>\n","      <td>-2.890083</td>\n","      <td>1.109969</td>\n","      <td>-0.121359</td>\n","      <td>-2.261857</td>\n","      <td>0.247998</td>\n","      <td>378.66</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>-0.966272</td>\n","      <td>-0.185226</td>\n","      <td>1.792993</td>\n","      <td>-0.863291</td>\n","      <td>-0.010309</td>\n","      <td>1.247203</td>\n","      <td>0.237609</td>\n","      <td>-1.387024</td>\n","      <td>-0.054952</td>\n","      <td>-0.226487</td>\n","      <td>0.178228</td>\n","      <td>-0.287924</td>\n","      <td>-1.059647</td>\n","      <td>-0.684093</td>\n","      <td>1.965775</td>\n","      <td>-1.232622</td>\n","      <td>-0.108300</td>\n","      <td>123.50</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","      <td>-1.158233</td>\n","      <td>0.877737</td>\n","      <td>1.548718</td>\n","      <td>0.403034</td>\n","      <td>-0.407193</td>\n","      <td>0.095921</td>\n","      <td>0.592941</td>\n","      <td>0.817739</td>\n","      <td>0.753074</td>\n","      <td>-0.822843</td>\n","      <td>0.538196</td>\n","      <td>-1.119670</td>\n","      <td>-0.451449</td>\n","      <td>-0.237033</td>\n","      <td>-0.038195</td>\n","      <td>0.803487</td>\n","      <td>-0.009431</td>\n","      <td>69.99</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Time        V1        V2        V3  ...       V19       V21  Amount  Class\n","0   0.0 -1.359807 -0.072781  2.536347  ...  0.403993 -0.018307  149.62      0\n","1   0.0  1.191857  0.266151  0.166480  ... -0.145783 -0.225775    2.69      0\n","2   1.0 -1.358354 -1.340163  1.773209  ... -2.261857  0.247998  378.66      0\n","3   1.0 -0.966272 -0.185226  1.792993  ... -1.232622 -0.108300  123.50      0\n","4   2.0 -1.158233  0.877737  1.548718  ...  0.803487 -0.009431   69.99      0\n","\n","[5 rows x 20 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"IzAJTScwh66W"},"source":["## Training\n","\n"]},{"cell_type":"code","metadata":{"id":"74MXLskSithc"},"source":["X = df.drop(['Class'],axis = 1)\n","y = df['Class']\n","X_train, X_test, Y_train, Y_test = train_test_split(X,y,test_size = 0.2, random_state = 42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v-pmobo2Uv3f","executionInfo":{"status":"ok","timestamp":1607504229375,"user_tz":360,"elapsed":1307,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"190fa257-5af1-44da-fdff-9a497b414b60"},"source":["# https://www.kaggle.com/janiobachmann/credit-fraud-dealing-with-imbalanced-datasets <- REFERENCE CELL 40\n","from sklearn.model_selection import GridSearchCV\n","\n","# List to append the score and then find the average\n","accuracy_lst = []\n","precision_lst = []\n","recall_lst = []\n","f1_lst = []\n","auc_lst = []\n","\n","#Implementing SMOTE Technique\n","kf = KFold(n_splits=5, random_state=0, shuffle=False)\n","\n","#model\n","lr = lgb.LGBMClassifier()\n","\n","#mode larams\n","params = {\"num_leaves\":[5,8,10,12],\n","              \"learning_rate\":[0.05,0.1,0.5], \n","              \"n_estimators\":[250,500,720,1000],\n","              \"max_bin\":[55,70,90], \n","              \"bagging_fraction\":[0.8,1],\n","              \"bagging_freq\":[5,7,10], \n","              \"feature_fraction\": [0.2319,0.5],\n","              \"feature_fraction_seed\":[9,12], \n","              \"bagging_seed\":[42],\n","              \"min_data_in_leaf\":[6,10], \n","              \"min_sum_hessian_in_leaf\":[11,13,15]}\n","\n","\n","#model CV\n","#lr_cv = RandomizedSearchCV(lgb.LGBMClassifier(), params, n_iter=4)\n","lr_cv = GridSearchCV(lgb.LGBMClassifier(), params)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n","  FutureWarning\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"q2E8WPA9PZCa"},"source":["#Imbalanced Dataset code not working for me\r\n","for train, test in kf.split(X_train, Y_train):\r\n","  pipeline = make_pipeline(SMOTE(sampling_strategy='minority'), lr_cv)\r\n","  model = pipeline.fit(X_train[train], Y_train[train])\r\n","  best_est = lr_cv.best_estimator_\r\n","  preds = best_est.predict(X_train[test])\r\n","\r\n","  accuracy_lst.append(pipeline.score(original_Xtrain[test], original_ytrain[test]))\r\n","  precision_lst.append(precision_score(original_ytrain[test], prediction))\r\n","  recall_lst.append(recall_score(original_ytrain[test], prediction))\r\n","  f1_lst.append(f1_score(original_ytrain[test], prediction))\r\n","  auc_lst.append(roc_auc_score(original_ytrain[test], prediction))\r\n","\r\n","print(\"accuracy: {}\".format(np.mean(accuracy_lst)))\r\n","print(\"precision: {}\".format(np.mean(precision_lst)))\r\n","print(\"recall: {}\".format(np.mean(recall_lst)))\r\n","print(\"f1: {}\".format(np.mean(f1_lst)))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OG6NXgZfMNku"},"source":["LGBM Model"]},{"cell_type":"code","metadata":{"id":"M_HKmZ-dWVpm"},"source":["def classification_model(model, X_train, y_train):\n","    #Fit the model:\n","    time_start = time.perf_counter() #start counting the time\n","    model.fit(X_train,y_train)\n","    n_cache = []\n","    \n","    train_predictions = model.predict(X_train)\n","    precision = precision_score(y_train, train_predictions)\n","    recall = recall_score(y_train, train_predictions)\n","    f1 = f1_score(y_train, train_predictions)\n","    \n","    print(\"Precision \", precision)\n","    print(\"Recall \", recall)\n","    print(\"F1 score \", f1)\n","    \n","    cr_val = cross_val_score(model, X_train, y_train, cv=5, scoring='roc_auc')\n","    \n","    time_end = time.perf_counter()\n","    \n","    total_time = time_end-time_start\n","    print(\"Cross Validation Score: %f\" %np.mean(cr_val))\n","    print(\"Amount of time spent during training the model and cross validation: %4.3f seconds\" % (total_time))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"egF5jfGCt42j","executionInfo":{"status":"ok","timestamp":1607504292510,"user_tz":360,"elapsed":58749,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"3c786cf7-c48c-42dc-ed62-5c2205435132"},"source":["\r\n","#Parameters chosen by grid search CV\r\n","lgb_model = lgb.LGBMClassifier(num_leaves=5,\r\n","                              learning_rate=0.05, n_estimators=720,\r\n","                              max_bin = 55, bagging_fraction = 0.8,\r\n","                              bagging_freq = 5, feature_fraction = 0.2319,\r\n","                              feature_fraction_seed=9, bagging_seed=9,\r\n","                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\r\n","\r\n","#lr_cv.fit(X_train, Y_train)\r\n","#lgb_model = lr_cv.best_estimator_\r\n","\r\n","classification_model(lgb_model, X_train, Y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Precision  0.9420289855072463\n","Recall  0.8248730964467005\n","F1 score  0.8795669824086604\n","Cross Validation Score: 0.981683\n","Amount of time spent during training the model and cross validation: 56.946 seconds\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NJDQK2MbDVex"},"source":["\n","test_predictions_lgb = lgb_model.predict(X_test)\n","precision_lgb = precision_score(Y_test, test_predictions_lgb)\n","recall_lgb = recall_score(Y_test, test_predictions_lgb)\n","f1_lgb = f1_score(Y_test, test_predictions_lgb)\n","y_scores_lgb = lgb_model.predict_proba\n","\n","cross_value_lgb = cross_val_score(lgb_model,X_test,Y_test ,cv=5, scoring='roc_auc')\n","\n","y_probas_lgb = cross_val_predict(lgb_model, X_test, Y_test, cv=3,\n","                                    method=\"predict_proba\")\n","\n","y_scores_lgb = y_probas_lgb[:,1] # score = proba of positive class"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OL2HELhADdUH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607504305622,"user_tz":360,"elapsed":70646,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"0bbc38f5-1b7e-4918-92b6-7cd011d54571"},"source":["#printing the results\n","\n","print(\"Precision \", precision_lgb)\n","print(\"Recall \", recall_lgb)\n","print(\"F1 score \", f1_lgb)\n","print(\"Cross Validation Score: %f\" %np.mean(cross_value_lgb))\n","print(\"ROC AUC score: \", roc_auc_score(Y_test, y_scores_lgb))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Precision  0.9411764705882353\n","Recall  0.8163265306122449\n","F1 score  0.8743169398907105\n","Cross Validation Score: 0.970736\n","ROC AUC score:  0.9699308518427068\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mYtPUvsoRs8I"},"source":["Precision  0.9285714285714286\r\n","Recall  0.7959183673469388\r\n","F1 score  0.8571428571428572\r\n","Cross Validation Score: 0.971530\r\n","ROC AUC score:  0.9682006226097641\r\n","\r\n","(With Randomized CV, ROC AUC goes down, grid_search might do better. Takes longer. We already have the best parameters from a Kaggle kernel)"]},{"cell_type":"code","metadata":{"id":"hZGqEOyBRssR"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gcRL3tNXL4yu"},"source":[""],"execution_count":null,"outputs":[]}]}