{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LGBM_with AUC and SMOTE","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"dElkAyTWQ8yg"},"source":["Reference:\n","\n","https://www.kaggle.com/currie32/predicting-fraud-with-tensorflow\n","\n","https://www.kaggle.com/janiobachmann/credit-fraud-dealing-with-imbalanced-datasets\n","\n","https://www.kaggle.com/nschneider/gbm-vs-xgboost-vs-lightgbm"]},{"cell_type":"code","metadata":{"id":"HhMUs5KJT8a_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607628973740,"user_tz":360,"elapsed":25367,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"5c078209-ce12-4343-eaca-e564f68f609c"},"source":["# Imported Libraries\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","import matplotlib.pyplot as plt\n","\n","#training models\n","from sklearn.model_selection import train_test_split, KFold, RandomizedSearchCV\n","from sklearn.metrics import plot_roc_curve\n","from xgboost import XGBClassifier\n","from sklearn.metrics import roc_curve, roc_auc_score, classification_report, accuracy_score, confusion_matrix \n","from imblearn.over_sampling import SMOTE\n","from imblearn.pipeline import make_pipeline\n","\n","from imblearn.over_sampling import SMOTE\n","from imblearn.pipeline import make_pipeline\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.metrics import recall_score\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import f1_score\n","from sklearn.model_selection import cross_val_score\n","import lightgbm as lgb\n","from sklearn.model_selection import cross_val_predict\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import GridSearchCV\n","\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.manifold import TSNE\n","from sklearn.decomposition import PCA, TruncatedSVD\n","import matplotlib.patches as mpatches\n","import time\n","import matplotlib.gridspec as gridspec\n","\n","from google.colab import drive\n","drive.mount('/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","  \"(https://pypi.org/project/six/).\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["Mounted at /drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sqf1PWdlU5MZ","colab":{"base_uri":"https://localhost:8080/","height":220},"executionInfo":{"status":"ok","timestamp":1607628977856,"user_tz":360,"elapsed":29445,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"094f7466-bcde-457f-f693-19f417697eba"},"source":["df = pd.read_csv('/drive/My Drive/BDS_Project/creditcard.csv')\r\n","df = df.drop(['V28','V27','V26','V25','V24','V23','V22','V20','V15','V13','V8'], axis=1)\r\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>V6</th>\n","      <th>V7</th>\n","      <th>V9</th>\n","      <th>V10</th>\n","      <th>V11</th>\n","      <th>V12</th>\n","      <th>V14</th>\n","      <th>V16</th>\n","      <th>V17</th>\n","      <th>V18</th>\n","      <th>V19</th>\n","      <th>V21</th>\n","      <th>Amount</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>-1.359807</td>\n","      <td>-0.072781</td>\n","      <td>2.536347</td>\n","      <td>1.378155</td>\n","      <td>-0.338321</td>\n","      <td>0.462388</td>\n","      <td>0.239599</td>\n","      <td>0.363787</td>\n","      <td>0.090794</td>\n","      <td>-0.551600</td>\n","      <td>-0.617801</td>\n","      <td>-0.311169</td>\n","      <td>-0.470401</td>\n","      <td>0.207971</td>\n","      <td>0.025791</td>\n","      <td>0.403993</td>\n","      <td>-0.018307</td>\n","      <td>149.62</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>1.191857</td>\n","      <td>0.266151</td>\n","      <td>0.166480</td>\n","      <td>0.448154</td>\n","      <td>0.060018</td>\n","      <td>-0.082361</td>\n","      <td>-0.078803</td>\n","      <td>-0.255425</td>\n","      <td>-0.166974</td>\n","      <td>1.612727</td>\n","      <td>1.065235</td>\n","      <td>-0.143772</td>\n","      <td>0.463917</td>\n","      <td>-0.114805</td>\n","      <td>-0.183361</td>\n","      <td>-0.145783</td>\n","      <td>-0.225775</td>\n","      <td>2.69</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>-1.358354</td>\n","      <td>-1.340163</td>\n","      <td>1.773209</td>\n","      <td>0.379780</td>\n","      <td>-0.503198</td>\n","      <td>1.800499</td>\n","      <td>0.791461</td>\n","      <td>-1.514654</td>\n","      <td>0.207643</td>\n","      <td>0.624501</td>\n","      <td>0.066084</td>\n","      <td>-0.165946</td>\n","      <td>-2.890083</td>\n","      <td>1.109969</td>\n","      <td>-0.121359</td>\n","      <td>-2.261857</td>\n","      <td>0.247998</td>\n","      <td>378.66</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>-0.966272</td>\n","      <td>-0.185226</td>\n","      <td>1.792993</td>\n","      <td>-0.863291</td>\n","      <td>-0.010309</td>\n","      <td>1.247203</td>\n","      <td>0.237609</td>\n","      <td>-1.387024</td>\n","      <td>-0.054952</td>\n","      <td>-0.226487</td>\n","      <td>0.178228</td>\n","      <td>-0.287924</td>\n","      <td>-1.059647</td>\n","      <td>-0.684093</td>\n","      <td>1.965775</td>\n","      <td>-1.232622</td>\n","      <td>-0.108300</td>\n","      <td>123.50</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","      <td>-1.158233</td>\n","      <td>0.877737</td>\n","      <td>1.548718</td>\n","      <td>0.403034</td>\n","      <td>-0.407193</td>\n","      <td>0.095921</td>\n","      <td>0.592941</td>\n","      <td>0.817739</td>\n","      <td>0.753074</td>\n","      <td>-0.822843</td>\n","      <td>0.538196</td>\n","      <td>-1.119670</td>\n","      <td>-0.451449</td>\n","      <td>-0.237033</td>\n","      <td>-0.038195</td>\n","      <td>0.803487</td>\n","      <td>-0.009431</td>\n","      <td>69.99</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Time        V1        V2        V3  ...       V19       V21  Amount  Class\n","0   0.0 -1.359807 -0.072781  2.536347  ...  0.403993 -0.018307  149.62      0\n","1   0.0  1.191857  0.266151  0.166480  ... -0.145783 -0.225775    2.69      0\n","2   1.0 -1.358354 -1.340163  1.773209  ... -2.261857  0.247998  378.66      0\n","3   1.0 -0.966272 -0.185226  1.792993  ... -1.232622 -0.108300  123.50      0\n","4   2.0 -1.158233  0.877737  1.548718  ...  0.803487 -0.009431   69.99      0\n","\n","[5 rows x 20 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"IzAJTScwh66W"},"source":["## Training\n","\n"]},{"cell_type":"code","metadata":{"id":"74MXLskSithc"},"source":["X = df.drop(['Class'],axis = 1)\n","y = df['Class']\n","X_train, X_test, Y_train, Y_test = train_test_split(X,y,test_size = 0.2, random_state = 42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gz9AGZqNagab"},"source":["clf = lgb.LGBMClassifier()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RFMoOMVKmJEA"},"source":["param_grid = {\"num_leaves\":[5,10],\r\n","              \"learning_rate\":[0.05,0.1], \r\n","              \"n_estimators\":[500,720],\r\n","              \"max_bin\":[55,90], \r\n","              \"bagging_fraction\":[0.8],\r\n","              \"bagging_freq\":[5], \r\n","              \"feature_fraction\": [0.2319],\r\n","              \"feature_fraction_seed\":[9], \r\n","              \"bagging_seed\":[9],\r\n","              \"min_data_in_leaf\":[6,10], \r\n","              \"min_sum_hessian_in_leaf\":[11,15]}\r\n","\r\n","rs_clf = RandomizedSearchCV(clf, param_grid, n_jobs=-1, verbose=3, cv=5, random_state=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uLT4CQzkrSap"},"source":["rs_clf = lgb.LGBMClassifier(num_leaves=5,\n","                              learning_rate=0.05, n_estimators=720,\n","                              max_bin = 55, bagging_fraction = 0.8,\n","                              bagging_freq = 5, feature_fraction = 0.2319,\n","                              feature_fraction_seed=9, bagging_seed=9,\n","                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RivyE5-ImOrQ","executionInfo":{"status":"ok","timestamp":1607629007768,"user_tz":360,"elapsed":13780,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"10a66a43-7d4b-4c16-c30a-b8bb7b74aa3c"},"source":["%%time\n","rs_clf.fit(X_train, Y_train)\n","pred = rs_clf.predict_proba(X_test)[:,1]"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 24.5 s, sys: 44.8 ms, total: 24.5 s\n","Wall time: 12.6 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Sb0k85gZGba","executionInfo":{"status":"ok","timestamp":1607629007770,"user_tz":360,"elapsed":12344,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"8c4a9545-07f1-4537-bc18-d8437398c2f8"},"source":["valid_score = roc_auc_score(Y_test, pred)\r\n","print('Validation ROC-AUC score:', valid_score)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Validation ROC-AUC score: 0.984278098549493\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"_ruUIyZ1ZH1d","executionInfo":{"status":"ok","timestamp":1607632085670,"user_tz":360,"elapsed":2245,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"900c709c-4048-4c64-de1c-006894f5ec4b"},"source":["plot_roc_curve(rs_clf, X_test, Y_test)"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7f6a638ca438>"]},"metadata":{"tags":[]},"execution_count":31},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":203},"id":"cJzd2psSZ5Oa","executionInfo":{"status":"error","timestamp":1607632088169,"user_tz":360,"elapsed":1093,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"6a9fcc10-f1ed-4e60-fc7f-0a807f71ad64"},"source":["print('best estimator:')\r\n","print(rs_clf.best_estimator_)"],"execution_count":32,"outputs":[{"output_type":"stream","text":["best estimator:\n"],"name":"stdout"},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-977696bca1b7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'best estimator:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrs_clf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'LGBMClassifier' object has no attribute 'best_estimator_'"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"Rhsoql3108TR","executionInfo":{"status":"ok","timestamp":1607632147730,"user_tz":360,"elapsed":2313,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"1acbdd55-bdf5-48af-d934-53a1ffb38777"},"source":["#lgb_model_1 = rs_clf.best_estimator_\n","from sklearn.metrics import plot_confusion_matrix\n","plot_confusion_matrix(rs_clf, X_test, Y_test) "],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f6a63900320>"]},"metadata":{"tags":[]},"execution_count":34},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"OmhMRToeKH1X"},"source":["## SMOTE Training"]},{"cell_type":"code","metadata":{"id":"yAwxA-o6ev4M"},"source":["X_train2 = X_train.values\r\n","Y_train2 = Y_train.values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v-pmobo2Uv3f","executionInfo":{"status":"ok","timestamp":1607629951123,"user_tz":360,"elapsed":921714,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"34ede6c4-e2df-4f6a-f134-8cd5bc806bc3"},"source":["# https://www.kaggle.com/janiobachmann/credit-fraud-dealing-with-imbalanced-datasets <- REFERENCE CELL 40\n","\n","# List to append the score and then find the average\n","auc_lst = []\n","\n","#Implementing SMOTE Technique\n","kf = KFold(n_splits=3, random_state=0, shuffle=False)\n","\n","#model\n","clf2 = lgb.LGBMClassifier()\n","\n","#model CV\n","rs_clf2 = RandomizedSearchCV(clf2, param_grid, cv=3, n_jobs=-1, verbose=3, random_state=0)\n","\n","for train, test in kf.split(X_train2, Y_train2):\n","  pipeline = make_pipeline(SMOTE(sampling_strategy='minority'), rs_clf2)\n","  model = pipeline.fit(X_train2[train], Y_train2[train])\n","  best_est = rs_clf2.best_estimator_\n","  preds = best_est.predict(X_train2[test])\n","\n","  auc_lst.append(roc_auc_score(Y_train2[test], preds))\n","\n","print(\"auc: {}\".format(np.mean(auc_lst)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n","  FutureWarning\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n","[Parallel(n_jobs=-1)]: Done  30 out of  30 | elapsed:  5.1min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n","[Parallel(n_jobs=-1)]: Done  30 out of  30 | elapsed:  4.7min finished\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n","[Parallel(n_jobs=-1)]: Done  30 out of  30 | elapsed:  4.6min finished\n"],"name":"stderr"},{"output_type":"stream","text":["auc: 0.9153969492011247\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rmrrBZhAoOgl"},"source":["def classification_model(model, X_train, y_train):\n","    #Fit the model:\n","    time_start = time.perf_counter() #start counting the time\n","    model.fit(X_train,y_train)\n","    n_cache = []\n","    \n","    train_predictions = model.predict(X_train)\n","    precision = precision_score(y_train, train_predictions)\n","    recall = recall_score(y_train, train_predictions)\n","    f1 = f1_score(y_train, train_predictions)\n","    \n","    print(\"Precision \", precision)\n","    print(\"Recall \", recall)\n","    print(\"F1 score \", f1)\n","    \n","    cr_val = cross_val_score(model, X_train, y_train, cv=5, scoring='roc_auc')\n","    \n","    time_end = time.perf_counter()\n","    \n","    total_time = time_end-time_start\n","    print(\"Cross Validation Score: %f\" %np.mean(cr_val))\n","    print(\"Amount of time spent during training the model and cross validation: %4.3f seconds\" % (total_time))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KzZTYkQ4xHlo","outputId":"bb122e39-9eae-4ac0-8a6c-38388acc53c4"},"source":["lgb_model = rs_clf2\n","classification_model(lgb_model, X_train, Y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n","[Parallel(n_jobs=-1)]: Done  30 out of  30 | elapsed:  2.9min finished\n"],"name":"stderr"},{"output_type":"stream","text":["Precision  0.9387755102040817\n","Recall  0.817258883248731\n","F1 score  0.8738127544097694\n","Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n","[Parallel(n_jobs=-1)]: Done  30 out of  30 | elapsed:  2.2min finished\n"],"name":"stderr"},{"output_type":"stream","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n","[Parallel(n_jobs=-1)]: Done  30 out of  30 | elapsed:  2.2min finished\n"],"name":"stderr"},{"output_type":"stream","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n","[Parallel(n_jobs=-1)]: Done  30 out of  30 | elapsed:  2.2min finished\n"],"name":"stderr"},{"output_type":"stream","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Jmi95VACxIKt"},"source":["\n","test_predictions_lgb = lgb_model.predict(X_test)\n","precision_lgb = precision_score(Y_test, test_predictions_lgb)\n","recall_lgb = recall_score(Y_test, test_predictions_lgb)\n","f1_lgb = f1_score(Y_test, test_predictions_lgb)\n","y_scores_lgb = lgb_model.predict_proba\n","\n","cross_value_lgb = cross_val_score(lgb_model,X_test,Y_test ,cv=5, scoring='roc_auc')\n","\n","y_probas_lgb = cross_val_predict(lgb_model, X_test, Y_test, cv=3,\n","                                    method=\"predict_proba\")\n","\n","y_scores_lgb = y_probas_lgb[:,1] # score = proba of positive class"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_uCLoprAxOiN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607631161756,"user_tz":360,"elapsed":1058,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"88a9061a-038d-4b52-e912-07831cb1307e"},"source":["#printing the results\n","\n","print(\"Precision \", precision_lgb)\n","print(\"Recall \", recall_lgb)\n","print(\"F1 score \", f1_lgb)\n","print(\"Cross Validation Score: %f\" %np.mean(cross_value_lgb))\n","print(\"ROC AUC score: \", roc_auc_score(Y_test, y_scores_lgb))"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Precision  0.9625\n","Recall  0.7857142857142857\n","F1 score  0.8651685393258427\n","Cross Validation Score: 0.966700\n","ROC AUC score:  0.9706932329769273\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3msJe7z2zC7r","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1607631221213,"user_tz":360,"elapsed":2210,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"5bc28f6d-0ef3-447a-87f4-3d5dd5e4b84c"},"source":["from sklearn.metrics import plot_confusion_matrix\n","plot_confusion_matrix(lgb_model, X_test, Y_test) "],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f6a63c228d0>"]},"metadata":{"tags":[]},"execution_count":24},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"IN7aLHro1s_V","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1607632582227,"user_tz":360,"elapsed":3829,"user":{"displayName":"Shruti Kapur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiUh-buvNDTmOjE-MsCHobYowtFpeqvObH-0dXT=s64","userId":"12550755841983800943"}},"outputId":"987d0083-5f4f-4a61-8489-78f0f097aee6"},"source":["plot_roc_curve(lgb_model, X_test, Y_test)"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7f6a63739e80>"]},"metadata":{"tags":[]},"execution_count":36},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"K5ABkDH-KFRH"},"source":[""],"execution_count":null,"outputs":[]}]}